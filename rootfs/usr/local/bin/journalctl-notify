#!/usr/bin/python3 -u

import sys
import json
import contextlib
import asyncio
from asyncio.subprocess import PIPE, DEVNULL

# Sleeping a little bit is very important to prevent reaching the TasksMax limit of systemd.
# See: https://unix.stackexchange.com/questions/253903/creating-threads-fails-with-resource-temporarily-unavailable-with-4-3-kernel
# It can happen that you have many logs to report which could cause this script to spawn many notify-send processes and therefore
# reaching the TasksMax limit. It will basically crash.
SLEEP_BETWEEN_NOTIFY = 0.1


async def is_running(proc):
    with contextlib.suppress(asyncio.TimeoutError):
        await asyncio.wait_for(proc.wait(), 1e-6)
    return proc.returncode is None


async def main() -> None:
    journal_system = await asyncio.create_subprocess_exec('journalctl', '--boot', '--system', '--follow', '--lines=all',
                                                          stdout=PIPE,
                                                          stderr=DEVNULL)

    journal_user = await asyncio.create_subprocess_exec('journalctl', '--boot', '--user', '--follow', '--lines=all',
                                                        stdout=PIPE,
                                                        stderr=DEVNULL)

    while await is_running(journal_system) and await is_running(journal_user):
        for journal in (journal_system, journal_user):
            while True: # Try to read as much lines as possible while there are some available
                try:
                    line = await asyncio.wait_for(journal.stdout.readline(), timeout=1) # The lower the timeout, the higher the CPU usage
                except asyncio.TimeoutError:
                    break # No new line available yet, try the next journal by breaking out

                begin = line.find(b"NOTIFY")

                if begin == -1:
                    continue

                log = line[begin + len("NOTIFY"):].strip().decode()

                try:
                    log = json.loads(log)
                except json.JSONDecodeError:
                    print("Wrong log format:", log)
                    continue

                if len(log) == 3:
                    urgency = log["urgency"]
                    title = log["title"]
                    body = log["body"]
                    await asyncio.create_subprocess_exec("/usr/bin/notify-send", "--urgency", urgency, title, body)
                    await asyncio.sleep(SLEEP_BETWEEN_NOTIFY)

                elif len(log) == 4:
                    urgency = log["urgency"]
                    icon = log["icon"]
                    title = log["title"]
                    body = log["body"]
                    await asyncio.create_subprocess_exec("/usr/bin/notify-send", "--urgency", urgency, "--icon", icon, title, body)
                    await asyncio.sleep(SLEEP_BETWEEN_NOTIFY)

                else:
                    print("Wrong log format:", log)
                    continue

    # This script should never exit, if it does, something went wrong, exit with status 1
    print("Error: one of the subprocesses exited")
    sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
